name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  test:
    name: Run unit tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Run test suite
        run: npm test

  build-and-push:
    name: Build Docker images
    runs-on: ubuntu-latest
    needs: test
    strategy:
      matrix:
        service: [auth, product, order, api-gateway]
    env:
      PUSH_IMAGES: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Prepare image names
        id: images
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
          GHCR_TOKEN: ${{ secrets.GHCR_TOKEN }}
          GHCR_OWNER: ${{ github.repository_owner }}
        run: |
          images="local/${{ matrix.service }}"
          should_push=false
          ghcr=false
          dockerhub=false

          if [ -n "$GHCR_TOKEN" ]; then
            images="${images}"$'\n'"ghcr.io/${GHCR_OWNER}/${{ matrix.service }}"
            should_push=true
            ghcr=true
          fi

          if [ -n "$DOCKERHUB_USERNAME" ] && [ -n "$DOCKERHUB_TOKEN" ]; then
            images="${images}"$'\n'"docker.io/${DOCKERHUB_USERNAME}/${{ matrix.service }}"
            should_push=true
            dockerhub=true
          fi

          {
            echo "list<<EOF"
            printf '%s\n' "$images"
            echo "EOF"
          } >> "$GITHUB_OUTPUT"

          if [ "$should_push" = true ]; then
            echo "push=true" >> "$GITHUB_OUTPUT"
          else
            echo "push=false" >> "$GITHUB_OUTPUT"
          fi
          echo "ghcr=${ghcr}" >> "$GITHUB_OUTPUT"
          echo "dockerhub=${dockerhub}" >> "$GITHUB_OUTPUT"

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ steps.images.outputs.list }}
          tags: |
            type=ref,event=branch
            type=sha

      - name: Log in to GitHub Container Registry
        if: ${{ env.PUSH_IMAGES == 'true' && steps.images.outputs.push == 'true' && steps.images.outputs.ghcr == 'true' }}
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Log in to Docker Hub
        if: ${{ env.PUSH_IMAGES == 'true' && steps.images.outputs.push == 'true' && steps.images.outputs.dockerhub == 'true' }}
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and (optionally) push ${{ matrix.service }}
        uses: docker/build-push-action@v6
        with:
          context: ${{ matrix.service }}
          file: ${{ matrix.service }}/Dockerfile
          push: ${{ env.PUSH_IMAGES == 'true' && steps.images.outputs.push == 'true' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  deploy:
    name: Deploy to server
    runs-on: ubuntu-latest
    needs: build-and-push
    env:
      SERVER_IP: ${{ secrets.SERVER_IP }}
      SERVER_USER: ${{ secrets.SERVER_USER }}
      SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      GIT_TOKEN: ${{ secrets.GIT_TOKEN }}
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' && env.SERVER_IP != '' && env.SERVER_USER != '' && env.SSH_PRIVATE_KEY != '' && env.GIT_TOKEN != '' }}
    steps:
      - name: Deploy over SSH
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ env.SERVER_IP }}
          username: ${{ env.SERVER_USER }}
          key: ${{ env.SSH_PRIVATE_KEY }}
          envs: DEPLOY_PATH,REPO,GIT_TOKEN,DOCKERHUB_USERNAME,DOCKERHUB_TOKEN,GHCR_OWNER,GHCR_TOKEN
          script: |
            set -euo pipefail
            DEPLOY_PATH="${DEPLOY_PATH:-/opt/eproject}"
            REPO_URL="https://${GIT_TOKEN}@github.com/${REPO}.git"

            if [ ! -d "$DEPLOY_PATH/.git" ]; then
              echo "Cloning application repository..."
              git clone "$REPO_URL" "$DEPLOY_PATH"
            else
              echo "Updating application repository..."
              git -C "$DEPLOY_PATH" pull "$REPO_URL" main
            fi

            if [ -n "${GHCR_TOKEN:-}" ]; then
              echo "$GHCR_TOKEN" | docker login ghcr.io -u "$GHCR_OWNER" --password-stdin
            fi

            if [ -n "${DOCKERHUB_USERNAME:-}" ] && [ -n "${DOCKERHUB_TOKEN:-}" ]; then
              echo "$DOCKERHUB_TOKEN" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
            fi

            cd "$DEPLOY_PATH"
            if [ ! -f .env ] && [ -f .env.example ]; then
              cp .env.example .env
            fi
            docker compose pull
            docker compose up -d --remove-orphans
        env:
          DEPLOY_PATH: ${{ vars.DEPLOY_PATH || '/opt/eproject' }}
          REPO: ${{ github.repository }}
          GIT_TOKEN: ${{ env.GIT_TOKEN }}
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
          GHCR_OWNER: ${{ github.repository_owner }}
          GHCR_TOKEN: ${{ secrets.GHCR_TOKEN }}
